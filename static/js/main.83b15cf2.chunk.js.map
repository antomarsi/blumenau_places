{"version":3,"sources":["Components/NewMarker.js","Components/MapContainer.js","Components/TopBar.js","utils.js/YelpApi.js","Components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["NewMarker","_ref","text","selected","selectPlaceHandle","react_default","a","createElement","title","className","onClick","index_es","icon","faMapMarkerAlt","size","MapContainer","onSelectMaker","place","_this$props","_this","props","filterhandler","selectedPlace","id","name","onApiLoaded","map","maps","event","addListener","slice","apply","document","querySelectorAll","forEach","item","setAttribute","onGoogleMapApiLoad","render","_this$props2","center","apiKey","places","tabIndex","lib_default","bootstrapURLKeys","key","defaultCenter","yesIWantToUseGoogleMapApiInternals","defaultZoom","onGoogleApiLoaded","src_Components_NewMarker","lat","coordinates","latitude","lng","longitude","Component","TopBar","state","isOpen","toggle","setState","onChangeHandler","length","Navbar","color","dark","expand","NavbarBrand","style","NavbarToggler","Collapse","navbar","Nav","NavItem","react_bootstrap_typeahead_lib","placeholder","aria-label","onChange","data","onInputChange","input","options","filterBy","labelKey","NavLink","href","target","YelpApi","apikey","this","Object","classCallCheck","url","bussiness_search","cors","getBussinessSearchUrl","concat","findBlumenau","fetch","mode","headers","Authorization","Content-Type","then","response","json","catch","error","console","message","Sidebar","index","Card","outline","width","marginBottom","CardHeader","CardBody","image_url","CardImg","top","src","alt","location","address1","CardTitle","backgroundStyle","backgroundColor","backgroundBigStyle","paddingRight","App","YELP_API_KEY","filter","yelp_response","businesses","sort","b","region","setSelectedPlace","placeId","setFilterPlace","Components_TopBar","Container","fluid","Row","Col","xs","sm","src_Components_Sidebar","toLowerCase","includes","src_Components_MapContainer","language","Boolean","window","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83b15cf2.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./NewMarker.css\";\n\nconst NewMarker = ({ text, selected, selectPlaceHandle }) => {\n  return (\n    <div\n      title={text}\n      className={selected ? \"marker selected\" : \"marker\"}\n      onClick={() => selectPlaceHandle()}\n    >\n      <FontAwesomeIcon icon={faMapMarkerAlt} size=\"3x\" />\n    </div>\n  );\n};\n\nexport default NewMarker;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport NewMarker from \"./NewMarker\";\nimport PropTypes from \"prop-types\";\nimport \"./MapContainer.css\";\n\nclass MapContainer extends Component {\n  onSelectMaker = place => {\n    const { filterhandler, selectPlaceHandle, selectedPlace } = this.props;\n    selectPlaceHandle(place.id !== selectedPlace ? place.id : null);\n    filterhandler(place.id !== selectedPlace ? place.name : \"\");\n  };\n\n  onApiLoaded = (map, maps) => {\n    maps.event.addListener(map, \"tilesloaded\", function() {\n      [].slice\n        .apply(document.querySelectorAll(\"#map button\"))\n        .forEach(function(item) {\n          item.setAttribute(\"tabindex\", \"-1\");\n        });\n      [].slice\n        .apply(document.querySelectorAll(\"#map a\"))\n        .forEach(function(item) {\n          item.setAttribute(\"tabindex\", \"-1\");\n        });\n    });\n    this.props.onGoogleMapApiLoad();\n  };\n\n  render = () => {\n    const { center, apiKey, places, selectedPlace } = this.props;\n    return (\n      <div className=\"map\" id=\"map\" tabIndex=\"-1\">\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: apiKey }}\n          defaultCenter={center}\n          yesIWantToUseGoogleMapApiInternals\n          tabIndex=\"-1\"\n          defaultZoom={16}\n          onGoogleApiLoaded={({ map, maps }) => this.onApiLoaded(map, maps)}\n        >\n          {places.map(place => (\n            <NewMarker\n              key={place.id}\n              text={place.name}\n              tabIndex=\"-1\"\n              lat={place.coordinates.latitude}\n              lng={place.coordinates.longitude}\n              selected={place.id === selectedPlace}\n              selectPlaceHandle={() => this.onSelectMaker(place)}\n            />\n          ))}\n        </GoogleMapReact>\n      </div>\n    );\n  };\n}\n\nMapContainer.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number,\n    lng: PropTypes.number\n  }),\n  onGoogleMapApiLoad: PropTypes.func.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  places: PropTypes.array,\n  selectedPlace: PropTypes.object\n};\n\nexport default MapContainer;\n","import React, { Component } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nclass TopBar extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n  \n  onChangeHandler = places => {\n    const { selectPlaceHandle, filterhandler } = this.props;\n    if (places.length > 0) {\n      selectPlaceHandle(places[0].id);\n      filterhandler(places[0].name);\n    } else {\n      selectPlaceHandle(null);\n    }\n  };\n\n  render = () => {\n    const { places, filterhandler } = this.props;\n    const filterBy = [\"name\"];\n    return (\n      <header>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand style={{ color: \"white\" }}>\n            Vizinhança Blumenau\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <Typeahead\n                  id=\"search-bar\"\n                  tabIndex=\"1\"\n                  placeholder=\"Pesquisar estabelecimento\"\n                  aria-label=\"Pesquisar estabelecimento\"\n                  onChange={data => this.onChangeHandler(data)}\n                  onInputChange={input => filterhandler(input)}\n                  options={places}\n                  filterBy={filterBy}\n                  labelKey=\"name\"\n                />\n              </NavItem>\n              <NavItem tabIndex=\"-1 \">\n                <NavLink\n                  tabIndex=\"3\"\n                  href=\"https://github.com/antomarsi/blumenau_places\"\n                  target=\"_blank\"\n                >\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </header>\n    );\n  };\n}\n\nexport default TopBar;\n","//Class created to use the YelpApi\n//\nclass YelpApi {\n  url = \"https://api.yelp.com/v3/\";\n  bussiness_search = \"/businesses/search\";\n  cors = \"https://cors-anywhere.herokuapp.com/\";\n\n  constructor(apikey) {\n    this.apikey = apikey;\n  }\n\n  getBussinessSearchUrl = () => {\n    return `${this.cors}${this.url}${this.bussiness_search}`;\n  };\n\n  findBlumenau = () => {\n    return fetch(\n      `${this.getBussinessSearchUrl()}?location=Blumenau+Santa+Catarina&limit=50`,\n      {\n        mode: \"cors\",\n        headers: {\n          Authorization: `Bearer ${this.apikey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  };\n}\n\nexport default YelpApi;\n","import React, { Component } from \"react\";\nimport { Card, CardHeader, CardBody, CardTitle, CardImg } from \"reactstrap\";\nimport \"./Sidebar.css\";\n\nclass Sidebar extends Component {\n  render() {\n    const { places, selectPlaceHandle, selectedPlace } = this.props;\n    return (\n      <ul tabIndex=\"-1\" className=\"sidebar\">\n        {places.map((place, index) => (\n          <li key={place.id} tabIndex=\"2\">\n            <Card\n              outline\n              color={place.id === selectedPlace ? \"success\" : \"\"}\n              id={place.id}\n              style={{ width: \"100%\", marginBottom: \"1rem\" }}\n              onClick={() => selectPlaceHandle(place.id)}\n            >\n              <CardHeader>{place.name}</CardHeader>\n              <CardBody>\n                {place.image_url && place.image_url && (\n                  <CardImg\n                    top\n                    width=\"100%\"\n                    src={place.image_url}\n                    alt={place.name}\n                  />\n                )}\n                {place.location.address1 && (\n                  <CardTitle>{`${place.location.address1}`}</CardTitle>\n                )}\n              </CardBody>\n            </Card>\n          </li>\n        ))}\n        {places.length <= 0 && (\n          <Card\n            outline\n            color=\"danger\"\n            style={{ width: \"100%\", marginBottom: \"1rem\" }}\n          >\n            <CardHeader>Nenhum resultado encontrado</CardHeader>\n          </Card>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport MapContainer from \"./Components/MapContainer\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport TopBar from \"./Components/TopBar\";\nimport YelpApi from \"./utils.js/YelpApi\";\nimport Sidebar from \"./Components/Sidebar\";\n\nconst backgroundStyle = {\n  backgroundColor: \"#343a40\"\n};\n\nconst backgroundBigStyle = {\n  backgroundColor: \"#343a40\",\n  paddingRight: \"0\"\n};\n\nclass App extends Component {\n  YELP_API_KEY =\n    \"QjVC2QvHNdWRktXHpZlxSuWHI9lX1wy_iopCzsyO7HENNSif2t2KuoIymwL5kl5k_YNHNplif_ojGZd-CLPGLVEAaR4BMod20JeCJ4V83N_7N2H2nsVyFlZFe55-XHYx\";\n\n  state = {\n    isOpen: false,\n    center: {\n      lat: -26.9187,\n      lng: -49.066\n    },\n    places: [],\n    filter: \"\",\n    selectedPlace: null\n  };\n\n  onGoogleMapApiLoad = () => {\n    let yelp = new YelpApi(this.YELP_API_KEY);\n    yelp.findBlumenau().then(yelp_response => {\n      this.setState({\n        places: yelp_response.businesses.sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        }),\n        center: {\n          lat: yelp_response.region.center.latitude,\n          lng: yelp_response.region.center.longitude\n        }\n      });\n    });\n  }\n\n  setSelectedPlace = placeId => {\n    this.setState({ selectedPlace: placeId });\n  };\n  setFilterPlace = name => {\n    this.setState({ filter: name });\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render = () => {\n    const apiKey = \"AIzaSyDlH8Id0Zsx_UuWS6nXc5K1ExPq5-U6Auw\";\n    return (\n      <div>\n        <TopBar\n          places={this.state.places}\n          selectPlaceHandle={this.setSelectedPlace}\n          filterhandler={this.setFilterPlace}\n        />\n        <Container fluid>\n          <Row>\n            <Col xs=\"12\" sm=\"3\" style={backgroundStyle}>\n              <Sidebar\n                places={this.state.places.filter(place => {\n                  return place.name.toLowerCase().includes(this.state.filter.toLowerCase());\n                })}\n                selectPlaceHandle={this.setSelectedPlace}\n                selectedPlace={this.state.selectedPlace}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"9\" style={backgroundBigStyle}>\n              <MapContainer\n                tabIndex=\"-1\"\n                places={this.state.places.filter(place => {\n                  return place.name.toLowerCase().includes(this.state.filter.toLowerCase());\n                })}\n                center={this.state.center}\n                apiKey={apiKey}\n                language=\"pt-BR\"\n                filterhandler={this.setFilterPlace}\n                selectPlaceHandle={this.setSelectedPlace}\n                selectedPlace={this.state.selectedPlace}\n                onGoogleMapApiLoad={this.onGoogleMapApiLoad}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}