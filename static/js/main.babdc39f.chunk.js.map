{"version":3,"sources":["Components/MapContainer.js","Components/TopBar.js","App.js","serviceWorker.js","index.js"],"names":["AnyReactComponent","_ref","text","react_default","a","createElement","SimpleMap","handleApiLoaded","map","maps","_this2","this","style","height","width","lib_default","bootstrapURLKeys","key","props","apiKey","defaultCenter","center","yesIWantToUseGoogleMapApiInternals","defaultZoom","onGoogleApiLoaded","_ref2","MapContainer_AnyReactComponent","Component","TopBar","state","isOpen","toggle","_this","setState","Navbar","color","dark","expand","NavbarBrand","react_bootstrap_typeahead_lib","id","onChange","handleChange","options","locations","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","href","target","App","lat","lng","Components_TopBar","Container","fluid","Row","Col","xs","MapContainer","process","GOOGLE_API_KEY","language","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAGMA,EAAoB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcC,EAAAC,EAAAC,cAAA,WAAMH,IAwB/BI,6MArBbC,gBAAkB,SAACC,EAAKC,6EAGf,IAAAC,EAAAC,KACP,OAEER,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACpCX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEY,iBAAkB,CAAEC,IAAKN,KAAKO,MAAMC,QACpCC,cAAeT,KAAKO,MAAMG,OAC1BC,oCAAkC,EAClCC,YAAa,GACbC,kBAAmB,SAAAC,GAAA,IAAGjB,EAAHiB,EAAGjB,IAAKC,EAARgB,EAAQhB,KAAR,OAAmBC,EAAKH,gBAAgBC,EAAKC,KAEhEN,EAAAC,EAAAC,cAACqB,EAAD,CAAmBxB,KAAK,uBAfVyB,gHC8CTC,6MAtCbC,MAAQ,CACNC,QAAQ,KAEVC,OAAS,WACPC,EAAKC,SAAS,CAAEH,QAASE,EAAKH,MAAMC,kFAG7B,IAAApB,EAAAC,KACP,OACER,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC/BlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAa1B,MAAO,CAAEuB,MAAO,UAA7B,0BAGAhC,EAAAC,EAAAC,cAACkC,EAAA,UAAD,CACEC,GAAG,aACHC,SAAU,kBAAM/B,EAAKQ,MAAMwB,cAC3BC,QAAShC,KAAKO,MAAM0B,YAEtBzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAeC,QAASnC,KAAKoB,SAC7B5B,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUjB,OAAQnB,KAAKkB,MAAMC,OAAQkB,QAAM,GACzC7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B7C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEC,KAAK,+CACLC,OAAO,UAFT,sBAxBK3B,aC0BN4B,6MAhCb1B,MAAQ,CACNC,QAAQ,EACRT,OAAQ,CACNmC,KAAM,QACNC,KAAM,WAGV1B,OAAS,WACPC,EAAKC,SAAS,CAAEH,QAASE,EAAKH,MAAMC,kFAKpC,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAD,CAAQd,UAHM,KAIdzC,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAWC,OAAK,GACdzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAKC,GAAG,MACN5D,EAAAC,EAAAC,cAAC2D,EAAD,CACE3C,OAAQV,KAAKkB,MAAMR,OACnBF,OAAQ8C,8CAAYC,eACpBC,SAAS,qBAvBPxC,aCOEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.babdc39f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport GoogleMapReact, { GoogleMapMarkers } from \"google-map-react\";\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass SimpleMap extends Component {\n  handleApiLoaded = (map, maps) => {\n    // use map and maps objects\n  };\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: \"100vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: this.props.apiKey }}\n          defaultCenter={this.props.center}\n          yesIWantToUseGoogleMapApiInternals\n          defaultZoom={16}\n          onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\n        >\n          <AnyReactComponent text=\"My Marker\" />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default SimpleMap;\n","import React, { Component } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nclass TopBar extends Component {\n  state = {\n    isOpen: false\n  };\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    return (\n      <header>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand style={{ color: \"white\" }}>\n            Vizinhan√ßa Blumenau\n          </NavbarBrand>\n          <Typeahead\n            id=\"search-bar\"\n            onChange={() => this.props.handleChange}\n            options={this.props.locations}\n          />\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink\n                  href=\"https://github.com/antomarsi/blumenau_places\"\n                  target=\"_blank\"\n                >\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </header>\n    );\n  }\n}\n\nexport default TopBar;\n","import React, { Component } from \"react\";\nimport MapContainer from \"./Components/MapContainer\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport TopBar from \"./Components/TopBar\";\n\nclass App extends Component {\n  state = {\n    isOpen: false,\n    center: {\n      lat: -26.9187,\n      lng: -49.066\n    }\n  };\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    const locations = [];\n    return (\n      <div>\n        <TopBar locations={locations} />\n        <Container fluid>\n          <Row>\n            <Col xs=\"12\">\n              <MapContainer\n                center={this.state.center}\n                apiKey={process.env.GOOGLE_API_KEY}\n                language=\"pt-BR\"\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}