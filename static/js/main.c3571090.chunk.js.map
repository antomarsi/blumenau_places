{"version":3,"sources":["Components/NewMarker.js","Components/MapContainer.js","Components/TopBar.js","utils.js/YelpApi.js","Components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["NewMarker","render","_this$props","_this","props","text","selected","selectPlaceHandle","react_default","a","createElement","title","className","onClick","index_es","icon","faMapMarkerAlt","size","Component","MapContainer","onSelectMaker","place","filterhandler","name","id","_this$props2","center","apiKey","places","selectedPlace","lib_default","bootstrapURLKeys","key","defaultCenter","yesIWantToUseGoogleMapApiInternals","defaultZoom","map","src_Components_NewMarker","lat","coordinates","latitude","lng","longitude","TopBar","state","isOpen","toggle","setState","onChangeHandler","length","Navbar","color","dark","expand","NavbarBrand","style","NavbarToggler","Collapse","navbar","Nav","NavItem","react_bootstrap_typeahead_lib","placeholder","aria-label","onChange","data","onInputChange","input","options","filterBy","labelKey","NavLink","href","target","YelpApi","apikey","this","Object","classCallCheck","url","bussiness_search","cors","getBussinessSearchUrl","concat","findBlumenau","fetch","mode","headers","Authorization","Content-Type","then","response","json","catch","error","console","message","Sidebar","Card","outline","width","marginBottom","CardHeader","CardBody","image_url","CardImg","top","src","alt","CardTitle","location","address1","backgroundStyle","backgroundColor","backgroundBigStyle","paddingRight","App","YELP_API_KEY","filter","componentDidMount","yelp_response","businesses","sort","b","region","setSelectedPlace","placeId","setFilterPlace","Components_TopBar","Container","fluid","Row","Col","xs","sm","src_Components_Sidebar","toLowerCase","includes","src_Components_MapContainer","tabIndex","language","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uVAqBeA,qNAdbC,OAAS,WAAM,IAAAC,EACiCC,EAAKC,MAA3CC,EADKH,EACLG,KAAMC,EADDJ,EACCI,SAAUC,EADXL,EACWK,kBACxB,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAON,EACPO,UAAWN,EAAW,kBAAoB,SAC1CO,QAAS,kBAAMN,MAEXC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAMC,IAAgBC,KAAK,sCAVhCC,cC4CTC,qNA1CbC,cAAgB,SAAAC,GAAS,IAAAnB,EACsBC,EAAKC,MAA1CkB,EADepB,EACfoB,cAAef,EADAL,EACAK,kBACvBe,EAAcD,EAAME,MACpBhB,EAAkBc,EAAMG,OAG1BvB,OAAS,WAAM,IAAAwB,EACqCtB,EAAKC,MAA/CsB,EADKD,EACLC,OAAQC,EADHF,EACGE,OAAQC,EADXH,EACWG,OAAQC,EADnBJ,EACmBI,cAChC,OACErB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CACEsB,iBAAkB,CAAEC,IAAKL,GACzBM,cAAeP,EACfQ,oCAAkC,EAClCC,YAAa,IAEZP,EAAOQ,IAAI,SAAAf,GAAK,OACfb,EAAAC,EAAAC,cAAC2B,EAAD,CACEL,IAAKX,EAAMG,GACXnB,KAAMgB,EAAME,KACZe,IAAKjB,EAAMkB,YAAYC,SACvBC,IAAKpB,EAAMkB,YAAYG,UACvBpC,SAAUe,EAAMG,KAAOK,EACvBtB,kBAAmB,kBAAMJ,EAAKiB,cAAcC,wCAxB/BH,iHCiEZyB,6MA1DbC,MAAQ,CACNC,QAAQ,KAGVC,OAAS,WACP3C,EAAK4C,SAAS,CAAEF,QAAS1C,EAAKyC,MAAMC,YAGtCG,gBAAkB,SAAApB,GAAU,IAAA1B,EACmBC,EAAKC,MAA1CG,EADkBL,EAClBK,kBAAmBe,EADDpB,EACCoB,cACvBM,EAAOqB,OAAS,GAClB1C,EAAkBqB,EAAO,GAAGJ,IAC5BF,EAAcM,EAAO,GAAGL,OAExBhB,EAAkB,SAItBN,OAAS,WAAM,IAAAwB,EACqBtB,EAAKC,MAA/BwB,EADKH,EACLG,OAAQN,EADHG,EACGH,cAEhB,OACEd,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC/B7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAaC,MAAO,CAAEJ,MAAO,UAA7B,0BAGA3C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAe3C,QAASV,EAAK2C,SAC7BtC,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUZ,OAAQ1C,EAAKyC,MAAMC,OAAQa,QAAM,GACzClD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAK/C,UAAU,UAAU8C,QAAM,GAC7BlD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAACmD,EAAA,UAAD,CACErC,GAAG,aACHsC,YAAY,4BACZC,aAAW,4BACXC,SAAU,SAAAC,GAAI,OAAI9D,EAAK6C,gBAAgBiB,IACvCC,cAAe,SAAAC,GAAK,OAAI7C,EAAc6C,IACtCC,QAASxC,EACTyC,SAlBG,CAAC,QAmBJC,SAAS,UAGb9D,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEC,KAAK,+CACLC,OAAO,UAFT,6CA5CKvD,aCuBNwD,EA5Bb,SAAAA,EAAYC,GAAQ,IAAAxE,EAAAyE,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAJpBG,IAAM,2BAIcH,KAHpBI,iBAAmB,qBAGCJ,KAFpBK,KAAO,uCAEaL,KAIpBM,sBAAwB,WACtB,SAAAC,OAAUhF,EAAK8E,MAAfE,OAAsBhF,EAAK4E,KAA3BI,OAAiChF,EAAK6E,mBALpBJ,KAQpBQ,aAAe,WACb,OAAOC,MAAK,GAAAF,OACPhF,EAAK+E,wBADE,8CAEV,CACEI,KAAM,OACNC,QAAS,CACPC,cAAa,UAAAL,OAAYhF,EAAKwE,QAC9Bc,eAAgB,sBAInBC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YAtBxBpB,KAAKD,OAASA,yDCuCHsB,2LA1CJ,IAAA/F,EAC8C0E,KAAKxE,MAAlDwB,EADD1B,EACC0B,OAAQrB,EADTL,EACSK,kBAAmBsB,EAD5B3B,EAC4B2B,cACnC,OACErB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACZgB,EAAOQ,IAAI,SAAAf,GAAK,OACfb,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CACEC,SAAO,EACPhD,MAAO9B,EAAMG,KAAOK,EAAgB,UAAY,GAChDG,IAAKX,EAAMG,GACXA,GAAIH,EAAMG,GACV+B,MAAO,CAAE6C,MAAO,OAAQC,aAAc,QACtCxF,QAAS,kBAAMN,EAAkBc,EAAMG,MAEvChB,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,KAAajF,EAAME,MACnBf,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,KACGlF,EAAMmF,WAAanF,EAAMmF,WACxBhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,CACEC,KAAG,EACHN,MAAM,OACNO,IAAKtF,EAAMmF,UACXI,IAAKvF,EAAME,OAGff,EAAAC,EAAAC,cAACmG,EAAA,EAAD,QAAA1B,OAAe9D,EAAMyF,SAASC,eAInCnF,EAAOqB,OAAS,GACfzC,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CACEC,SAAO,EACPhD,MAAM,SACNI,MAAO,CAAE6C,MAAO,OAAQC,aAAc,SAEtC7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,6CAlCUpF,cCGhB8F,EAAkB,CACtBC,gBAAiB,WAGbC,EAAqB,CACzBD,gBAAiB,UACjBE,aAAc,KAqFDC,6MAjFbC,aACE,qIAEFzE,MAAQ,CACNC,QAAQ,EACRnB,OAAQ,CACNY,KAAM,QACNG,KAAM,QAERb,OAAQ,GACR0F,OAAQ,GACRzF,cAAe,QAGjB0F,kBAAoB,WACP,IAAI7C,EAAQvE,EAAKkH,cACvBjC,eAAeM,KAAK,SAAA8B,GACvBrH,EAAK4C,SAAS,CACZnB,OAAQ4F,EAAcC,WAAWC,KAAK,SAACjH,EAAGkH,GACxC,OAAIlH,EAAEc,KAAOoG,EAAEpG,MAAc,EACzBd,EAAEc,KAAOoG,EAAEpG,KAAa,EACrB,IAETG,OAAQ,CACNY,IAAKkF,EAAcI,OAAOlG,OAAOc,SACjCC,IAAK+E,EAAcI,OAAOlG,OAAOgB,kBAMzCmF,iBAAmB,SAAAC,GACjB3H,EAAK4C,SAAS,CAAElB,cAAeiG,OAEjCC,eAAiB,SAAAxG,GACfpB,EAAK4C,SAAS,CAAEuE,OAAQ/F,OAG1BuB,OAAS,WACP3C,EAAK4C,SAAS,CAAEF,QAAS1C,EAAKyC,MAAMC,YAGtC5C,OAAS,WAEP,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsH,EAAD,CACEpG,OAAQzB,EAAKyC,MAAMhB,OACnBrB,kBAAmBJ,EAAK0H,iBACxBvG,cAAenB,EAAK4H,iBAEtBvH,EAAAC,EAAAC,cAACuH,EAAA,EAAD,CAAWC,OAAK,GACd1H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,KACE3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAI/E,MAAOyD,GACzBxG,EAAAC,EAAAC,cAAC6H,EAAD,CACE3G,OAAQzB,EAAKyC,MAAMhB,OAAO0F,OAAO,SAAAjG,GAC/B,OAAOA,EAAME,KAAKiH,cAAcC,SAAStI,EAAKyC,MAAM0E,OAAOkB,iBAE7DjI,kBAAmBJ,EAAK0H,iBACxBhG,cAAe1B,EAAKyC,MAAMf,iBAG9BrB,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAI/E,MAAO2D,GACzB1G,EAAAC,EAAAC,cAACgI,EAAD,CACEC,SAAS,KACT/G,OAAQzB,EAAKyC,MAAMhB,OACnBF,OAAQvB,EAAKyC,MAAMlB,OACnBC,OAxBG,0CAyBHiH,SAAS,QACTtH,cAAenB,EAAK4H,eACpBxH,kBAAmBJ,EAAK0H,iBACxBhG,cAAe1B,EAAKyC,MAAMf,kDAxExBX,aCJE2H,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCXNC,IAAShJ,OAAOO,EAAAC,EAAAC,cAACwI,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.c3571090.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./NewMarker.css\";\n\nclass NewMarker extends Component {\n\n  render = () => {\n    const { text, selected, selectPlaceHandle } = this.props;\n    return (\n      <div\n        title={text}\n        className={selected ? \"marker selected\" : \"marker\"}\n        onClick={() => selectPlaceHandle()}\n        >\n            <FontAwesomeIcon icon={faMapMarkerAlt} size=\"3x\" />\n      </div>\n    );\n  }\n}\n\nexport default NewMarker;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport NewMarker from \"./NewMarker\";\nimport PropTypes from \"prop-types\";\nimport \"./MapContainer.css\";\n\nclass MapContainer extends Component {\n  onSelectMaker = place => {\n    const { filterhandler, selectPlaceHandle } = this.props;\n    filterhandler(place.name);\n    selectPlaceHandle(place.id);\n  };\n\n  render = () => {\n    const { center, apiKey, places, selectedPlace } = this.props;\n    return (\n      <div className=\"map\">\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: apiKey }}\n          defaultCenter={center}\n          yesIWantToUseGoogleMapApiInternals\n          defaultZoom={16}\n        >\n          {places.map(place => (\n            <NewMarker\n              key={place.id}\n              text={place.name}\n              lat={place.coordinates.latitude}\n              lng={place.coordinates.longitude}\n              selected={place.id === selectedPlace}\n              selectPlaceHandle={() => this.onSelectMaker(place)}\n            />\n          ))}\n        </GoogleMapReact>\n      </div>\n    );\n  };\n}\n\nMapContainer.propTypes = {\n  center: PropTypes.shape({\n    lat: PropTypes.number,\n    lng: PropTypes.number\n  }),\n  apiKey: PropTypes.string.isRequired,\n  places: PropTypes.array,\n  selectedPlace: PropTypes.object\n};\n\nexport default MapContainer;\n","import React, { Component } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nclass TopBar extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n  \n  onChangeHandler = places => {\n    const { selectPlaceHandle, filterhandler } = this.props;\n    if (places.length > 0) {\n      selectPlaceHandle(places[0].id);\n      filterhandler(places[0].name);\n    } else {\n      selectPlaceHandle(null);\n    }\n  };\n\n  render = () => {\n    const { places, filterhandler } = this.props;\n    const filterBy = [\"name\"];\n    return (\n      <header>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand style={{ color: \"white\" }}>\n            Vizinhan√ßa Blumenau\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <Typeahead\n                  id=\"search-bar\"\n                  placeholder=\"Pesquisar estabelecimento\"\n                  aria-label=\"Pesquisar estabelecimento\"\n                  onChange={data => this.onChangeHandler(data)}\n                  onInputChange={input => filterhandler(input)}\n                  options={places}\n                  filterBy={filterBy}\n                  labelKey=\"name\"\n                />\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  href=\"https://github.com/antomarsi/blumenau_places\"\n                  target=\"_blank\"\n                >\n                  GitHub\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </header>\n    );\n  };\n}\n\nexport default TopBar;\n","//Class created to use the YelpApi\n//\nclass YelpApi {\n  url = \"https://api.yelp.com/v3/\";\n  bussiness_search = \"/businesses/search\";\n  cors = \"https://cors-anywhere.herokuapp.com/\";\n\n  constructor(apikey) {\n    this.apikey = apikey;\n  }\n\n  getBussinessSearchUrl = () => {\n    return `${this.cors}${this.url}${this.bussiness_search}`;\n  };\n\n  findBlumenau = () => {\n    return fetch(\n      `${this.getBussinessSearchUrl()}?location=Blumenau+Santa+Catarina&limit=50`,\n      {\n        mode: \"cors\",\n        headers: {\n          Authorization: `Bearer ${this.apikey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    )\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  };\n}\n\nexport default YelpApi;\n","import React, { Component } from \"react\";\nimport { Card, CardHeader, CardBody, CardTitle, CardImg } from \"reactstrap\";\nimport \"./Sidebar.css\";\n\nclass Sidebar extends Component {\n  render() {\n    const { places, selectPlaceHandle, selectedPlace } = this.props;\n    return (\n      <div className=\"sidebar\">\n        {places.map(place => (\n          <Card\n            outline\n            color={place.id === selectedPlace ? \"success\" : \"\"}\n            key={place.id}\n            id={place.id}\n            style={{ width: \"100%\", marginBottom: \"1rem\" }}\n            onClick={() => selectPlaceHandle(place.id)}\n          >\n            <CardHeader>{place.name}</CardHeader>\n            <CardBody>\n              {place.image_url && place.image_url && (\n                <CardImg\n                  top\n                  width=\"100%\"\n                  src={place.image_url}\n                  alt={place.name}\n                />\n              )}\n              <CardTitle>{`${place.location.address1}`}</CardTitle>\n            </CardBody>\n          </Card>\n        ))}\n        {places.length > 0 && (\n          <Card\n            outline\n            color=\"danger\"\n            style={{ width: \"100%\", marginBottom: \"1rem\" }}\n          >\n            <CardHeader>Nenhum resultado encontrado</CardHeader>\n          </Card>\n        )}\n      </div>\n    );\n  }\n}\n\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport MapContainer from \"./Components/MapContainer\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport TopBar from \"./Components/TopBar\";\nimport YelpApi from \"./utils.js/YelpApi\";\nimport Sidebar from \"./Components/Sidebar\";\n\nconst backgroundStyle = {\n  backgroundColor: \"#343a40\"\n};\n\nconst backgroundBigStyle = {\n  backgroundColor: \"#343a40\",\n  paddingRight: \"0\"\n};\n\nclass App extends Component {\n  YELP_API_KEY =\n    \"QjVC2QvHNdWRktXHpZlxSuWHI9lX1wy_iopCzsyO7HENNSif2t2KuoIymwL5kl5k_YNHNplif_ojGZd-CLPGLVEAaR4BMod20JeCJ4V83N_7N2H2nsVyFlZFe55-XHYx\";\n\n  state = {\n    isOpen: false,\n    center: {\n      lat: -26.9187,\n      lng: -49.066\n    },\n    places: [],\n    filter: \"\",\n    selectedPlace: null\n  };\n\n  componentDidMount = () => {\n    let yelp = new YelpApi(this.YELP_API_KEY);\n    yelp.findBlumenau().then(yelp_response => {\n      this.setState({\n        places: yelp_response.businesses.sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        }),\n        center: {\n          lat: yelp_response.region.center.latitude,\n          lng: yelp_response.region.center.longitude\n        }\n      });\n    });\n  };\n\n  setSelectedPlace = placeId => {\n    this.setState({ selectedPlace: placeId });\n  };\n  setFilterPlace = name => {\n    this.setState({ filter: name });\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render = () => {\n    const apiKey = \"AIzaSyDlH8Id0Zsx_UuWS6nXc5K1ExPq5-U6Auw\";\n    return (\n      <div>\n        <TopBar\n          places={this.state.places}\n          selectPlaceHandle={this.setSelectedPlace}\n          filterhandler={this.setFilterPlace}\n        />\n        <Container fluid>\n          <Row>\n            <Col xs=\"12\" sm=\"3\" style={backgroundStyle}>\n              <Sidebar\n                places={this.state.places.filter(place => {\n                  return place.name.toLowerCase().includes(this.state.filter.toLowerCase());\n                })}\n                selectPlaceHandle={this.setSelectedPlace}\n                selectedPlace={this.state.selectedPlace}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"9\" style={backgroundBigStyle}>\n              <MapContainer\n                tabIndex=\"-1\"\n                places={this.state.places}\n                center={this.state.center}\n                apiKey={apiKey}\n                language=\"pt-BR\"\n                filterhandler={this.setFilterPlace}\n                selectPlaceHandle={this.setSelectedPlace}\n                selectedPlace={this.state.selectedPlace}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}